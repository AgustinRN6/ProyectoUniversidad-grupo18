/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vista;

import Control.AlumnosData;
import Entidades.Alumno;
import java.awt.Color;
import java.awt.Point;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Agustin
 */
public class GestionAlumnos extends javax.swing.JInternalFrame {
    
    AlumnosData alumnos = new AlumnosData(); //Se utilizará para las consultas de la base de datos
    //Se crea el modelo de la tabla, y se reemplaza el valor de celda editable a falso
    private DefaultTableModel modeloTabla = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int fila, int columna) {
            return false;
        }
    };
    /**
     * Creates new form GestionAlumnos
     */
    public GestionAlumnos() {
        initComponents();
        columnaAlumnos();
        cargarAlumnos(null,-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GrupoFiltro = new javax.swing.ButtonGroup();
        jpGestorBotones = new javax.swing.JPanel();
        jbInsertar = new javax.swing.JButton();
        jbActualizar = new javax.swing.JButton();
        jbBorrar = new javax.swing.JButton();
        jbAltaLogica = new javax.swing.JButton();
        jbBajaLogica = new javax.swing.JButton();
        jpMostrar = new javax.swing.JPanel();
        jspTabla = new javax.swing.JScrollPane();
        jtTabla = new javax.swing.JTable();
        lTodosLosAlumnos = new javax.swing.JLabel();
        jbActualizarTabla = new javax.swing.JButton();
        jtfBuscar = new javax.swing.JTextField();
        jlBuscar = new javax.swing.JLabel();
        jrbIDAlumno = new javax.swing.JRadioButton();
        jrbDNI = new javax.swing.JRadioButton();
        jrbNombre = new javax.swing.JRadioButton();
        jrbApellido = new javax.swing.JRadioButton();
        jrbActivos = new javax.swing.JRadioButton();
        jrbInactivos = new javax.swing.JRadioButton();
        lbGestionAlumnos = new javax.swing.JLabel();
        jpAlumnos = new javax.swing.JPanel();
        jlNombre = new javax.swing.JLabel();
        jtfNombre = new javax.swing.JTextField();
        jlApellido = new javax.swing.JLabel();
        jtfApellido = new javax.swing.JTextField();
        jlDNI = new javax.swing.JLabel();
        jtfDNI = new javax.swing.JTextField();
        jlFechaDeNacimiento = new javax.swing.JLabel();
        jlEstado = new javax.swing.JLabel();
        jlIDAlumno = new javax.swing.JLabel();
        jtfIDAlumno = new javax.swing.JTextField();
        jlInsertarAlumno = new javax.swing.JLabel();
        jbNuevo = new javax.swing.JButton();
        jdcFechaDeNacimiento = new com.toedter.calendar.JDateChooser();
        jtfEstado = new javax.swing.JTextField();

        jpGestorBotones.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jbInsertar.setBackground(new java.awt.Color(0, 255, 102));
        jbInsertar.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jbInsertar.setForeground(new java.awt.Color(0, 0, 0));
        jbInsertar.setText("INSERTAR");
        jbInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbInsertarActionPerformed(evt);
            }
        });

        jbActualizar.setBackground(new java.awt.Color(0, 204, 204));
        jbActualizar.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jbActualizar.setForeground(new java.awt.Color(0, 0, 0));
        jbActualizar.setText("ACTUALIZAR");
        jbActualizar.setEnabled(false);
        jbActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbActualizarActionPerformed(evt);
            }
        });

        jbBorrar.setBackground(new java.awt.Color(255, 51, 51));
        jbBorrar.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jbBorrar.setForeground(new java.awt.Color(0, 0, 0));
        jbBorrar.setText("BORRAR");
        jbBorrar.setEnabled(false);
        jbBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBorrarActionPerformed(evt);
            }
        });

        jbAltaLogica.setBackground(new java.awt.Color(153, 255, 51));
        jbAltaLogica.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jbAltaLogica.setForeground(new java.awt.Color(0, 0, 0));
        jbAltaLogica.setText("ALTA LÓGICA");
        jbAltaLogica.setEnabled(false);
        jbAltaLogica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAltaLogicaActionPerformed(evt);
            }
        });

        jbBajaLogica.setBackground(new java.awt.Color(255, 204, 0));
        jbBajaLogica.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jbBajaLogica.setForeground(new java.awt.Color(0, 0, 0));
        jbBajaLogica.setText("BAJA LÓGICA");
        jbBajaLogica.setEnabled(false);
        jbBajaLogica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBajaLogicaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpGestorBotonesLayout = new javax.swing.GroupLayout(jpGestorBotones);
        jpGestorBotones.setLayout(jpGestorBotonesLayout);
        jpGestorBotonesLayout.setHorizontalGroup(
            jpGestorBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpGestorBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbInsertar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbActualizar)
                .addGap(20, 20, 20)
                .addGroup(jpGestorBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbAltaLogica)
                    .addComponent(jbBajaLogica))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbBorrar)
                .addContainerGap())
        );
        jpGestorBotonesLayout.setVerticalGroup(
            jpGestorBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpGestorBotonesLayout.createSequentialGroup()
                .addGroup(jpGestorBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpGestorBotonesLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jpGestorBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbInsertar)
                            .addComponent(jbActualizar)
                            .addComponent(jbBorrar))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jpGestorBotonesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jbAltaLogica)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbBajaLogica)))
                .addContainerGap())
        );

        jpMostrar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jtTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jtTabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtTablaMouseClicked(evt);
            }
        });
        jspTabla.setViewportView(jtTabla);

        lTodosLosAlumnos.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        lTodosLosAlumnos.setForeground(new java.awt.Color(0, 0, 0));
        lTodosLosAlumnos.setText("Todos los alumnos");

        jbActualizarTabla.setBackground(new java.awt.Color(0, 204, 204));
        jbActualizarTabla.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jbActualizarTabla.setForeground(new java.awt.Color(0, 0, 0));
        jbActualizarTabla.setText("ACTUALIZAR TABLA");
        jbActualizarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbActualizarTablaActionPerformed(evt);
            }
        });

        jtfBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfBuscarKeyReleased(evt);
            }
        });

        jlBuscar.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jlBuscar.setText("Buscar por:");

        GrupoFiltro.add(jrbIDAlumno);
        jrbIDAlumno.setText("ID Alumno");
        jrbIDAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbIDAlumnoActionPerformed(evt);
            }
        });

        GrupoFiltro.add(jrbDNI);
        jrbDNI.setText("DNI");
        jrbDNI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbDNIActionPerformed(evt);
            }
        });

        GrupoFiltro.add(jrbNombre);
        jrbNombre.setText("Nombre");
        jrbNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbNombreActionPerformed(evt);
            }
        });

        GrupoFiltro.add(jrbApellido);
        jrbApellido.setText("Apellido");
        jrbApellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbApellidoActionPerformed(evt);
            }
        });

        GrupoFiltro.add(jrbActivos);
        jrbActivos.setText("Activos");
        jrbActivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbActivosActionPerformed(evt);
            }
        });

        GrupoFiltro.add(jrbInactivos);
        jrbInactivos.setText("Inactivos");
        jrbInactivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbInactivosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpMostrarLayout = new javax.swing.GroupLayout(jpMostrar);
        jpMostrar.setLayout(jpMostrarLayout);
        jpMostrarLayout.setHorizontalGroup(
            jpMostrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpMostrarLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jpMostrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpMostrarLayout.createSequentialGroup()
                        .addComponent(jlBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jrbIDAlumno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jrbNombre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jrbApellido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jrbDNI)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jrbActivos))
                    .addComponent(lTodosLosAlumnos)
                    .addGroup(jpMostrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jspTabla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jpMostrarLayout.createSequentialGroup()
                            .addComponent(jbActualizarTabla)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jrbInactivos)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jtfBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jpMostrarLayout.setVerticalGroup(
            jpMostrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMostrarLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lTodosLosAlumnos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jspTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jpMostrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlBuscar)
                    .addComponent(jrbIDAlumno)
                    .addComponent(jrbNombre)
                    .addComponent(jrbApellido)
                    .addComponent(jrbDNI)
                    .addComponent(jrbActivos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpMostrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbActualizarTabla)
                    .addComponent(jtfBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jrbInactivos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lbGestionAlumnos.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        lbGestionAlumnos.setForeground(new java.awt.Color(0, 0, 0));
        lbGestionAlumnos.setText("GESTION DE ALUMNOS");

        jpAlumnos.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jlNombre.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jlNombre.setText("Nombre:");

        jlApellido.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jlApellido.setText("Apellido:");

        jlDNI.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jlDNI.setText("DNI:");

        jlFechaDeNacimiento.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jlFechaDeNacimiento.setText("Fecha de nacimiento:");

        jlEstado.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jlEstado.setText("Estado:");

        jlIDAlumno.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jlIDAlumno.setText("ID Alumno:");

        jtfIDAlumno.setEditable(false);

        jlInsertarAlumno.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jlInsertarAlumno.setText("Insertar Alumno:");

        jbNuevo.setBackground(new java.awt.Color(204, 204, 204));
        jbNuevo.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jbNuevo.setForeground(new java.awt.Color(0, 0, 0));
        jbNuevo.setText("NUEVO");
        jbNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNuevoActionPerformed(evt);
            }
        });

        jtfEstado.setEditable(false);
        jtfEstado.setBackground(java.awt.Color.green);
        jtfEstado.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jtfEstado.setText("Activo");
        jtfEstado.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jtfEstado.setEnabled(false);

        javax.swing.GroupLayout jpAlumnosLayout = new javax.swing.GroupLayout(jpAlumnos);
        jpAlumnos.setLayout(jpAlumnosLayout);
        jpAlumnosLayout.setHorizontalGroup(
            jpAlumnosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAlumnosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpAlumnosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpAlumnosLayout.createSequentialGroup()
                        .addComponent(jlInsertarAlumno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbNuevo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jlIDAlumno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfIDAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpAlumnosLayout.createSequentialGroup()
                        .addGroup(jpAlumnosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpAlumnosLayout.createSequentialGroup()
                                .addComponent(jlNombre)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfNombre)
                                .addGap(18, 18, 18)
                                .addGroup(jpAlumnosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jlEstado)
                                    .addComponent(jlDNI)))
                            .addGroup(jpAlumnosLayout.createSequentialGroup()
                                .addGroup(jpAlumnosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jpAlumnosLayout.createSequentialGroup()
                                        .addComponent(jlFechaDeNacimiento)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jdcFechaDeNacimiento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jpAlumnosLayout.createSequentialGroup()
                                        .addComponent(jlApellido)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jtfApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(73, 73, 73)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpAlumnosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtfDNI, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(jtfEstado))))
                .addContainerGap())
        );
        jpAlumnosLayout.setVerticalGroup(
            jpAlumnosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAlumnosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpAlumnosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbNuevo)
                    .addComponent(jlInsertarAlumno)
                    .addComponent(jlIDAlumno)
                    .addComponent(jtfIDAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jpAlumnosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpAlumnosLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jpAlumnosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlNombre))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpAlumnosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlApellido))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpAlumnosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jdcFechaDeNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlFechaDeNacimiento)))
                    .addGroup(jpAlumnosLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpAlumnosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlDNI))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpAlumnosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlEstado)
                            .addComponent(jtfEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jpGestorBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jpMostrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jpAlumnos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(lbGestionAlumnos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbGestionAlumnos)
                .addGap(10, 10, 10)
                .addComponent(jpMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpGestorBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbBajaLogicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBajaLogicaActionPerformed
        //Se realiza las corroboraciones correspondientes para dar de baja lógica al Alumno
        //El ID se utilizará para buscar alumno y para actualizar
        int ID = Integer.parseInt(jtfIDAlumno.getText());

        //Se verificará si el alumno existe o no, caso contrario brinda el error
        Alumno a = alumnos.buscarAlumno(ID);

        if (a != null) {
            JOptionPane.showMessageDialog(null, "Se ha dado de baja al alumno con éxito");
            alumnos.darDeBaja(a.getDni());
            estadoAlumno();
        }else {
            JOptionPane.showMessageDialog(null, "No se puede dar de baja un alumno que ha sido eliminado");
        }
    }//GEN-LAST:event_jbBajaLogicaActionPerformed

    private void jbNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNuevoActionPerformed
        //Se limpia todos los atributos para insertar un nuevo Alumno
        jtfNombre.setText("");
        jtfApellido.setText("");
        jtfDNI.setText("");
        jtfIDAlumno.setText("");
        jtfEstado.setEnabled(false);
        jdcFechaDeNacimiento.setDate(null);
        //Se habilita la posibilidad de Insertar Alumnos a la base de datos
        jbInsertar.setEnabled(true);
        //Se inhabilita la posibilidad de Actualizar, alta, baja o eliminar Alumnos a la base de datos
        jbActualizar.setEnabled(false);        
        jbAltaLogica.setEnabled(false);  
        jbBajaLogica.setEnabled(false);
        jbBorrar.setEnabled(false);

    }//GEN-LAST:event_jbNuevoActionPerformed

    private void jtTablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtTablaMouseClicked
        cargarInformacion(evt.getPoint());
    }//GEN-LAST:event_jtTablaMouseClicked

    private void jbInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbInsertarActionPerformed
        //Se realizará las comprobaciones correspondientes para Insertar un nuevo Alumno        
        if (ingresarAlumno() != null) {
            JOptionPane.showMessageDialog(null, "Se ha cargado el alumno con éxito");
            alumnos.cargarAlumno(ingresarAlumno());
        }
        
    }//GEN-LAST:event_jbInsertarActionPerformed

    private void jbActualizarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbActualizarTablaActionPerformed
        //Se encarga de actualizar la tabla
        cargarAlumnos(null, -1);
    }//GEN-LAST:event_jbActualizarTablaActionPerformed

    private void jbActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbActualizarActionPerformed
        //Se realizará las comprobaciones correspondientes para Actualizar un Alumno
        try {
            Alumno a = ingresarAlumno();

            //El ID se utilizará para buscar alumno y para actualizarlo
            int ID = Integer.parseInt(jtfIDAlumno.getText());

            //Se verificará si el alumno existe o no, caso contrario brinda el error
            Alumno aAnterior = alumnos.buscarAlumno(ID);

            if (a != null && aAnterior != null) {
                a.setId(ID); //Toma el Id del alumno, caso contrario no podrá actualizarlo
                JOptionPane.showMessageDialog(null, "Se ha actualizado al alumno con éxito");
                alumnos.actualizarAlumno(a);
            } else if (aAnterior == null) {
                JOptionPane.showMessageDialog(null, "No se puede actualizar un alumno que ha sido eliminado");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "No hay alumno seleccionado para actualizar");
        }
    }//GEN-LAST:event_jbActualizarActionPerformed

    private void jbBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBorrarActionPerformed
        //Borra el alumno seleccionado por el ID
        try {
            
            int ID = Integer.parseInt(jtfIDAlumno.getText());
            Alumno alumnoEliminar = alumnos.buscarAlumno(ID);
            
            if (alumnoEliminar != null) {
                alumnos.borrarAlumno(alumnoEliminar.getDni()); //Se utiliza el dni para eliminar
                JOptionPane.showMessageDialog(null, "Se ha eliminado el alumno con éxito");
            } else {
                JOptionPane.showMessageDialog(null, "No existe este alumno, no pudo llevarse a cabo la acción");
            }
                
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null,"El casillero ID está vacío, selecciona el alumno a eliminar");
        }
    }//GEN-LAST:event_jbBorrarActionPerformed

    private void jbAltaLogicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAltaLogicaActionPerformed
        //Se realiza las corroboraciones correspondientes para dar de alta lógica al Alumno
        //El ID se utilizará para buscar alumno y para actualizar
        int ID = Integer.parseInt(jtfIDAlumno.getText());

        //Se verificará si el alumno existe o no, caso contrario brinda el error
        Alumno a = alumnos.buscarAlumno(ID);

        if (a != null) {
            JOptionPane.showMessageDialog(null, "Se ha dado de alta al alumno con éxito");
            alumnos.darDeAlta(a.getDni());
            estadoAlumno();
        } else {
            JOptionPane.showMessageDialog(null, "No se puede dar de alta un alumno que ha sido eliminado");
        }
    }//GEN-LAST:event_jbAltaLogicaActionPerformed

    private void jrbIDAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbIDAlumnoActionPerformed
        //Se realizará una búsqueda comparativa del cuadro cargado en pantalla según la opción que elija el usuario.
        String filtroEscrito = jtfBuscar.getText();

        if (!filtroEscrito.isEmpty()) { //Si está vacío (al borrar el texto o al no haber texto) debe tener la tabla completa

            filtrarTabla(filtroEscrito);

        } else {
            cargarAlumnos(null, -1);
        }
    }//GEN-LAST:event_jrbIDAlumnoActionPerformed

    private void jrbDNIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbDNIActionPerformed
        //Se realizará una búsqueda comparativa del cuadro cargado en pantalla según la opción que elija el usuario.
        String filtroEscrito = jtfBuscar.getText();

        if (!filtroEscrito.isEmpty()) { //Si está vacío (al borrar el texto o al no haber texto) debe tener la tabla completa

            filtrarTabla(filtroEscrito);

        } else {
            cargarAlumnos(null, -1);
        }
    }//GEN-LAST:event_jrbDNIActionPerformed

    private void jtfBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfBuscarKeyReleased
        //Se realizará una búsqueda comparativa del cuadro cargado en pantalla según la opción que elija el usuario.
        String filtroEscrito = jtfBuscar.getText();
        
        if (!filtroEscrito.isEmpty()) { //Si está vacío (al borrar el texto o al no haber texto) debe tener la tabla completa
            
            filtrarTabla(filtroEscrito);
            
        } else {
            cargarAlumnos(null,-1);
        }
    }//GEN-LAST:event_jtfBuscarKeyReleased

    private void jrbNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbNombreActionPerformed
        //Se realizará una búsqueda comparativa del cuadro cargado en pantalla según la opción que elija el usuario.
        String filtroEscrito = jtfBuscar.getText();

        if (!filtroEscrito.isEmpty()) { //Si está vacío (al borrar el texto o al no haber texto) debe tener la tabla completa

            filtrarTabla(filtroEscrito);

        } else {
            cargarAlumnos(null, -1);
        }
    }//GEN-LAST:event_jrbNombreActionPerformed

    private void jrbApellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbApellidoActionPerformed
        //Se realizará una búsqueda comparativa del cuadro cargado en pantalla según la opción que elija el usuario.
        String filtroEscrito = jtfBuscar.getText();

        if (!filtroEscrito.isEmpty()) { //Si está vacío (al borrar el texto o al no haber texto) debe tener la tabla completa

            filtrarTabla(filtroEscrito);

        } else {
            cargarAlumnos(null, -1);
        }
    }//GEN-LAST:event_jrbApellidoActionPerformed

    private void jrbActivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbActivosActionPerformed
        
        //Si se selecciona Activos, se mostraran los Alumnos activos
        int [] columnaNombre = ordenarColumnaNombre();        
        cargarAlumnos(jrbActivos.getText(), columnaNombre[5]);
    }//GEN-LAST:event_jrbActivosActionPerformed

    private void jrbInactivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbInactivosActionPerformed
        //Si se selecciona Activos, se mostraran los Alumnos activos
        int[] columnaNombre = ordenarColumnaNombre();
        cargarAlumnos(jrbInactivos.getText(), columnaNombre[5]);
    }//GEN-LAST:event_jrbInactivosActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup GrupoFiltro;
    private javax.swing.JButton jbActualizar;
    private javax.swing.JButton jbActualizarTabla;
    private javax.swing.JButton jbAltaLogica;
    private javax.swing.JButton jbBajaLogica;
    private javax.swing.JButton jbBorrar;
    private javax.swing.JButton jbInsertar;
    private javax.swing.JButton jbNuevo;
    private com.toedter.calendar.JDateChooser jdcFechaDeNacimiento;
    private javax.swing.JLabel jlApellido;
    private javax.swing.JLabel jlBuscar;
    private javax.swing.JLabel jlDNI;
    private javax.swing.JLabel jlEstado;
    private javax.swing.JLabel jlFechaDeNacimiento;
    private javax.swing.JLabel jlIDAlumno;
    private javax.swing.JLabel jlInsertarAlumno;
    private javax.swing.JLabel jlNombre;
    private javax.swing.JPanel jpAlumnos;
    private javax.swing.JPanel jpGestorBotones;
    private javax.swing.JPanel jpMostrar;
    private javax.swing.JRadioButton jrbActivos;
    private javax.swing.JRadioButton jrbApellido;
    private javax.swing.JRadioButton jrbDNI;
    private javax.swing.JRadioButton jrbIDAlumno;
    private javax.swing.JRadioButton jrbInactivos;
    private javax.swing.JRadioButton jrbNombre;
    private javax.swing.JScrollPane jspTabla;
    private javax.swing.JTable jtTabla;
    private javax.swing.JTextField jtfApellido;
    private javax.swing.JTextField jtfBuscar;
    private javax.swing.JTextField jtfDNI;
    private javax.swing.JTextField jtfEstado;
    private javax.swing.JTextField jtfIDAlumno;
    private javax.swing.JTextField jtfNombre;
    private javax.swing.JLabel lTodosLosAlumnos;
    private javax.swing.JLabel lbGestionAlumnos;
    // End of variables declaration//GEN-END:variables

    //Se agrega las columnas con sus nombres correspondientes a la tabla
    private void columnaAlumnos() {
        modeloTabla.addColumn("ID alumno");
        modeloTabla.addColumn("Nombre");
        modeloTabla.addColumn("Apellido");
        modeloTabla.addColumn("DNI");
        modeloTabla.addColumn("Fecha de nacimiento");
        modeloTabla.addColumn("Estado");
        jtTabla.setModel(modeloTabla);
    }
    
    //Se agregan todos los alumnos de la base de datos, filtro es para filtrar segun lo colocado por usuario
    private void cargarAlumnos(String filtro,int opcion) {
        
        limpiarTabla();
        int[] columna = ordenarColumnaNombre(); //Toma el orden de las columnas con sus respectivos nombres
        
        Iterator<Alumno> iterar = alumnos.mostrarAlumnos().iterator();
        while (iterar.hasNext()) {
            Alumno a = iterar.next();
            if (filtro == null && opcion == -1) {
                modeloTabla.addRow(new Object[]{a.getId(), a.getNombre(), a.getApellido(),
                a.getDni(), a.getFechaNacimiento(), estadoAlumnoParaTabla(a.isEstado())}); 
            }
            
            if (columna[0] == opcion && compararValores(Integer.parseInt(filtro),a.getId())) { //Si la columna ID Alumno es igual al filtro
                modeloTabla.addRow(new Object[]{a.getId(), a.getNombre(), a.getApellido(),
                a.getDni(), a.getFechaNacimiento(), estadoAlumnoParaTabla(a.isEstado())});
            }
            
            if (columna[1] == opcion && compararValores(filtro, a.getNombre())) { //Si la columna Nombre es igual al filtro
                modeloTabla.addRow(new Object[]{a.getId(), a.getNombre(), a.getApellido(),
                    a.getDni(), a.getFechaNacimiento(), estadoAlumnoParaTabla(a.isEstado())});
            }
            
            if (columna[2] == opcion && compararValores(filtro, a.getApellido())) { //Si la columna Apellido es igual al filtro
                modeloTabla.addRow(new Object[]{a.getId(), a.getNombre(), a.getApellido(),
                    a.getDni(), a.getFechaNacimiento(), estadoAlumnoParaTabla(a.isEstado())});
            }
            
            if (columna[3] == opcion && compararValores(Integer.parseInt(filtro), a.getDni())) { //Si la columna ID Alumno es igual al filtro
                modeloTabla.addRow(new Object[]{a.getId(), a.getNombre(), a.getApellido(),
                    a.getDni(), a.getFechaNacimiento(), estadoAlumnoParaTabla(a.isEstado())});
            }
            
            if (columna[5] == opcion && filtro.equalsIgnoreCase("Activos") && a.isEstado()) { //Si la columna estado es igual a true
                modeloTabla.addRow(new Object[]{a.getId(), a.getNombre(), a.getApellido(),
                    a.getDni(), a.getFechaNacimiento(), estadoAlumnoParaTabla(a.isEstado())});
            }
            
            if (columna[5] == opcion && filtro.equalsIgnoreCase("Inactivos") && !a.isEstado()) { //Si la columna estado es igual a false
                modeloTabla.addRow(new Object[]{a.getId(), a.getNombre(), a.getApellido(),
                    a.getDni(), a.getFechaNacimiento(), estadoAlumnoParaTabla(a.isEstado())});
            }
            
                
        }
    }
    
    //Limpia la tabla
    private void limpiarTabla() {

        int f = modeloTabla.getRowCount() - 1; //total de filas (-1 para recorrer for)
        for (int i = f; i >= 0; i--) {
            modeloTabla.removeRow(i);
        }
    }
    
    //Tomar los datos de la tabla y pasarlo a los datos editables debajo
    private void cargarInformacion(Point evento) 
    {
        
        int seleccionFila = jtTabla.rowAtPoint(evento); 
        /*
         El Point evento es el parametro que se tomará de distintos eventos, el Point muestra la 
        ubicación de la fila seleccionada, para tomar esa información.
        seleccionFila es el valor de la fila tomada
        */
        
        int columnaID = 0; //En primera instancia la columna ID alumno es 0, pero puede modificarse durante la ejecución
        
        //con el for podemos saber cuál es la columna con el nombre ID alumno iterando sobre todas las columnas y consultando su nombre   
        for (int i = 0; i < jtTabla.getColumnCount(); i++) {           
            if (jtTabla.getColumnName(i).equals("ID alumno")) {
                columnaID = i;
            }     
        }
        
        //Se busca alumno seleccionado por el ID alumno
        int ID_Alumno = (int)(jtTabla.getValueAt(seleccionFila, columnaID));
        
        try {
            
            //Realiza la busqueda del alumno con el ID
            Alumno alumnoSelec = alumnos.buscarAlumno(ID_Alumno);

            //Se completa lo seleccionado en la tabla en cada atributo:
            jtfNombre.setText(alumnoSelec.getNombre());
            jtfApellido.setText(alumnoSelec.getApellido());
            jtfIDAlumno.setText(String.valueOf(alumnoSelec.getId()));
            jtfDNI.setText(String.valueOf(alumnoSelec.getDni()));
            //Si está activo el alumno se cambia a activo y color verde, caso contrario a inactivo color rojo
            estadoAlumno();
            //Se realiza la conversión de LocalDate a Date
            Date fechaDate = Date.from(alumnoSelec.getFechaNacimiento().atStartOfDay(ZoneId.systemDefault()).toInstant());
            jdcFechaDeNacimiento.setDate(fechaDate);

            //Se inhabilita la posibilidad de Insertar nuevo ALumno, debe colocarse la opción "Nuevo"
            jbInsertar.setEnabled(false);
            
            //Se habilita la posibilidad de Actualizar, alta, baja o eliminar Alumnos a la base de datos
            jbActualizar.setEnabled(true);
            jbAltaLogica.setEnabled(true);
            jbBajaLogica.setEnabled(true);
            jbBorrar.setEnabled(true);
            
            //Se habilita el texto donde se visualiza el estado
            jtfEstado.setEnabled(true);
            
            
        } catch (NullPointerException e) {            
            JOptionPane.showMessageDialog(null, "No puede cargarse información de un alumno que no existe");            
        }
            
              
        
        
    }
    
    //Funcion que determina si el alumno está activo o dado de baja
    private boolean estadoAlumno() {        
        
        //Si se da el caso de que no capta nada (en caso de ser nuevo Alumno), brinda la excepción
        try {
            int ID = Integer.parseInt(jtfIDAlumno.getText());
            if (alumnos.buscarAlumno(ID).isEstado()) {
                jtfEstado.setText("Activo");
                jtfEstado.setBackground(Color.green);
                return true;

            } else {
                jtfEstado.setText("Inactivo");
                jtfEstado.setBackground(Color.red);
                return false;
            }
            
        }catch(NumberFormatException e) {
            return true;
        } 
        
    }
    
    //Se crea un string en base al estado del Alumno, para mostrarlo en la tabla
    private String estadoAlumnoParaTabla(boolean estado) {
        
        if (estado) {
            return "activo";
        } else {
            return "inactivo";
        }      
    }
    
    //Se utilizará para insertar y actualizar alumnos, es una verificación por cada casillero
    private Alumno ingresarAlumno() {
        
        try {

            //Se utilizará para que, al sumar cualquier error, no le permita Insertar a la BD el alumno
            int error = 0;
            String nombre = jtfNombre.getText();

            //Varchar = 100, si es más largo el nombre, tira el error
            if (nombre.length() > 100) {
                JOptionPane.showMessageDialog(null, "El nombre se excede de la cantidad de caracteres, ingrese uno menor a 100 caracteres");
                error++;
            } else if (nombre.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No puede estar vacío el casillero Nombre");
                error++;
            }
            String apellido = jtfApellido.getText();

            //Varchar = 100 si es más largo el apellido, tira el error
            if (apellido.length() > 100) {
                JOptionPane.showMessageDialog(null, "El apellido se excede de la cantidad de caracteres, ingrese uno menor a 100 caracteres");
                error++;
            } else if (apellido.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No puede estar vacío el casillero Apellido");
                error++;
            }

            int DNI = Integer.parseInt(jtfDNI.getText());
            //Si se coloca otro valor que no es númerico entero, da excepción NumberFormatException

            //INT = 11, si se excede la cantidad de digitos tira error
            if (String.valueOf(DNI).length() > 11) {
                JOptionPane.showMessageDialog(null, "El DNI debe tener como máximo 11 digitos, por favor, corrijalo");
                error++;
            } else if (DNI < 1) {
                JOptionPane.showMessageDialog(null, "El DNI no puede ser 0 o negativo, por favor, corrijalo");
            }
            
            //Se utilizará como comprobación de que si se encuentra un DNI en la BD igual al colocado en pantalla, brindará error
            Iterator<Alumno> iterar = alumnos.mostrarAlumnos().iterator();
            while (iterar.hasNext()) {
                Alumno a = iterar.next();
                /*Se realiza corroboracion del ID que ya esté seleccionado debido a que
                * si se necesita actualizar se da por acentado que el DNI va a ser el mismo
                * que el que se desea actualizar
                */
                if (a.getDni() == DNI && a.getId() != Integer.parseInt(jtfIDAlumno.getText())) {
                    JOptionPane.showMessageDialog(null, "Este DNI ya existe, por favor, corrijalo");
                    error++;
                }
            }

            //El estado del alumno
            boolean estado = estadoAlumno();

            //Toma la fecha de nacimiento del Alumno como Date, no lo podemos manipular en el sistema actual, debemos cambiarlo a LocalDate
            Date fechaNacimientoDate = jdcFechaDeNacimiento.getDate();

            //Se crea de antemano FechaDeNacimiento de tipo LocalDate (el que se utilizará en alumno
            LocalDate fechaNacimiento = null;
            if (fechaNacimientoDate == null) {
                JOptionPane.showMessageDialog(null, "Debe colocar una fecha de nacimiento al alumno");
                error++;
            } else { //Es para evitar la excepcion de objeto null

                //Se pasa de Date a LocalDate para tratarlo en nuestro sistema
                fechaNacimiento = fechaNacimientoDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

                //Se crea un formato similar a la base de datos año-mes-dia
                DateTimeFormatter formatoLocalDate = DateTimeFormatter.ofPattern("yyyy-MM-dd");

                //Se coloca el formato en el LocalDate que será cargado a la fecha de nacimiento del Alumno
                fechaNacimiento.format(formatoLocalDate);

            }

            if (error == 0) {
                Alumno a = new Alumno(DNI, nombre, apellido, fechaNacimiento, estado); //Se crea el alumno
                return a;
                
            } else {
                JOptionPane.showMessageDialog(null, "Debe atender a los errores previamente mencionados");
            }

       } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Debe colocar un formato válido, númerico, en DNI");
            System.out.println(e.getMessage() + e.getStackTrace());
        }
        return null;
    }
    
    
    //Se utilizará para comparar dos valores numericos
    private boolean compararValores(int busqueda, int buscado) {

        String busquedaS = Integer.toString(busqueda);
        String buscadoS = Integer.toString(buscado);
        int contador = 0;
        if (busqueda < 0) {
            return true;
        } else {
            try {

                for (int i = 0; i < busquedaS.length(); i++) {

                    if (buscadoS.charAt(i) == busquedaS.charAt(i)) {
                        contador++;
                    }
                }

                if (contador == busquedaS.length()) {

                    return true;

                } else {

                    return false;

                }

            } catch (ArrayIndexOutOfBoundsException | StringIndexOutOfBoundsException e) {
                return false;
            }

        }

    }
    //Se utilizará para comparar dos valores de texto
    private boolean compararValores(String busqueda, String buscado) {

        String busquedaS = busqueda;
        String buscadoS = buscado;
        int contador = 0;
       
        try {

            for (int i = 0; i < busquedaS.length(); i++) {

                if (buscadoS.charAt(i) == busquedaS.charAt(i) || Character.toUpperCase(busquedaS.charAt(i)) == buscadoS.charAt(i)) {
                    contador++;
                }
            }

            if (contador == busquedaS.length()) {

                return true;

            } else {

                return false;

            }

        } catch (ArrayIndexOutOfBoundsException | StringIndexOutOfBoundsException e) {
            return false;
        }

    }
    
    //Ordena los valores de cada una de las columnas con sus respectivos nombres, por ejemplo, el ID alumno debe ser 0, pero puede cambiar
    private int[] ordenarColumnaNombre() {
        
        int[] columnas = new int[jtTabla.getColumnCount()]; //Se brindará la cantidad de columnas para determinar su orden
        

        for (int i = 0; i < jtTabla.getColumnCount(); i++) {           
            if (jtTabla.getColumnName(i).equals("ID alumno")) {
                columnas[0] = i;
            }
            if (jtTabla.getColumnName(i).equals("Nombre")) {
                columnas[1] = i;
            }
            if (jtTabla.getColumnName(i).equals("Apellido")) {
                columnas[2] = i;
            }
            if (jtTabla.getColumnName(i).equals("DNI")) {
                columnas[3] = i;
            }
            if (jtTabla.getColumnName(i).equals("Fecha de nacimiento")) {
                columnas[4] = i;
            }
            if (jtTabla.getColumnName(i).equals("Estado")) {
                columnas[5] = i;
            }
        }
        
        return columnas;
        
    }
    
    //Funcion que se utilizará para filtrar tabla según el dato elegido
    private void filtrarTabla(String f) {
        
        String filtrado = f;
        int[] columnaNombre = ordenarColumnaNombre(); //Se utilizará para determinar el nombre de la columna y su posicion en la tabla
        System.out.println("Ingresa valor string " + f);
        
        try {
            
            if (jrbIDAlumno.isSelected()) { //Es la columna [0], recordar que puede cambiar el valor.  ID Alumno 
                
                int filtrarNum = Integer.parseInt(filtrado);

                cargarAlumnos(filtrado, columnaNombre[0]);

            }
            
            if (jrbNombre.isSelected()) { //Es la columna [1] , Nombre 

                cargarAlumnos(filtrado, columnaNombre[1]);

            }
            
            if (jrbApellido.isSelected()) { //Es la columna [2] , Apellido

                cargarAlumnos(filtrado, columnaNombre[2]);

            }
            
            if (jrbDNI.isSelected()) { //Es la columna [3], DNI 

                int filtrarNum = Integer.parseInt(filtrado);

                cargarAlumnos(filtrado, columnaNombre[3]);

            }      
            
        } catch(NumberFormatException e) {
            
            JOptionPane.showMessageDialog(null, "Debe tener un valor numérico");
            cargarAlumnos(null, -1); //Se carga la tabla nuevamente en caso de verificarse excepcion
            
        }
        
        
        
        
    }
    
    
}
